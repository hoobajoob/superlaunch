-- This file is for use with Corona Game Edition
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

module(...)

function physicsData(scale)
	local physics = { data =
	{ 
		
		["mainLevel"] = {
			
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   9636, 255.5  ,  9438, 255.5  ,  9598, 190.5  ,  9628, 193.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   1278, 254.5  ,  1181, 256.5  ,  1222, 223.5  ,  1247, 224.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   5662, 254.5  ,  5565, 256.5  ,  5606, 223.5  ,  5631, 224.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   7838, 254.5  ,  7742, 256.5  ,  7782, 223.5  ,  7807, 224.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   9598, 190.5  ,  9438, 255.5  ,  9542, 159.5  ,  9567, 160.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   2817, 193.5  ,  2879, 255.5  ,  2718, 255.5  ,  2787, 191.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   10305, 193.5  ,  10367, 255.5  ,  10206, 255.5  ,  10275, 191.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   11681, 193.5  ,  11743, 255.5  ,  11582, 255.5  ,  11651, 191.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   11.5, 256  ,  12794, 351.5  ,  0, 347.5  ,  -0.5, 272  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   12799.5, 4  ,  12799.5, 344  ,  12763, 255.5  ,  12767.5, 3  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   12799.5, 344  ,  12794, 351.5  ,  9636, 255.5  ,  12763, 255.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   7868, 257.5  ,  7711.5, 258  ,  7838, 254.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   1308, 257.5  ,  1152, 260.5  ,  1181, 256.5  ,  1278, 254.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   5692, 257.5  ,  5536, 260.5  ,  5565, 256.5  ,  5662, 254.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   12794, 351.5  ,  7711.5, 258  ,  7868, 257.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   2718, 255.5  ,  12794, 351.5  ,  1152, 260.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = , maskBits =  },
					shape = {   7711.5, 258  ,  12794, 351.5  ,  5536, 260.5  }
				}  
		}
		
	} }

	-- apply scale factor
	local s = scale or 1.0
	for bi,body in pairs(physics.data) do
		for fi,fixture in ipairs(body) do
			for ci,coordinate in ipairs(fixture.shape) do
				fixture.shape[ci] = s * coordinate
			end
		end
	end
	
	function physics:get(name)
		return unpack(self.data[name])
	end
	
	return physics;
end


